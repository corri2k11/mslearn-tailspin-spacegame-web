trigger:
  branches:
    include:
    - '*'     #build for all branches
  paths:
    exclude:
    - docs/*  #exclude any files within docs folder
              #by default, a build is triggered when a change is pushed to any file on any branch
              #with this, its the same, except for changes made to files inside the docs folder.
pool:
  vmImage: 'ubuntu-16.04'
  demands:
    - npm
  
variables:
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetSdkVersion: '3.1.100'
  
steps:
  #.NET Core SDK install
  - task: UseDotNet@2
    displayName: 'Use .NET Core SDK $(dotnetSdkVersion)'
    inputs:
      version: '$(dotnetSdkVersion)'
  
  #NEW: .NET Core SDK 2.1.505 for SonarCloud
  - task: UseDotNet@2
    displayName: 'Use .NET Core SDK 2.1.505 for SonarCloud'
    inputs:
      version: '2.1.505'

  #npm install 
  - task: Npm@1
    displayName: 'Run npm install'
    inputs:
      verbose: false
  
  #node-sass
  - script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
    displayName: 'Compile Sass assets'
  
  #gulp
  - task: gulp@1
    displayName: 'Run gulp tasks'
  
  #echo
  - script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
    displayName: 'Write build info'
    workingDirectory: $(wwwrootDir)
  
  #restore
  - task: DotNetCoreCLI@2
    displayName: 'Restore project dependencies'
    inputs:
      command: 'restore'
      projects: '**/*.csproj'
  
  #NEW 1: SonarCloud prepare for analysis
  - task: SonarCloudPrepare@1
    displayName: 'Prepare SonarCloud analysis'
    inputs:
      SonarCloud: 'SonarCloudConnection1'
      organization: '$(SonarOrganization)'
      projectKey: '$(SonarProjectKey)'
      projectName: '$(SonarProjectName)'
      projectVersion: '$(Build.BuildNumber)'
      extraProperties: |
       sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/TestResults/Coverage/coverage.opencover.xml
       sonar.exclusions=**/wwwroot/lib/**/*

  #build
  - task: DotNetCoreCLI@2
    displayName: 'Build the project - $(buildConfiguration)'
    inputs:
      command: 'build'
      arguments: '--no-restore --configuration $(buildConfiguration)'
      projects: '**/*.csproj'
  
  #install HTML report-generator
  - task: DotNetCoreCLI@2
    displayName: 'Install ReportGenerator'
    inputs:
      command: custom
      custom: tool
      arguments: 'install --global dotnet-reportgenerator-globaltool'

  #test
  - task: DotNetCoreCLI@2
    displayName: 'Run unit tests - $(buildConfiguration)'
    inputs:
      command: 'test'
      arguments: '--no-build --configuration $(buildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat="cobertura%2copencover" /p:CoverletOutput=$(Build.SourcesDirectory)/TestResults/Coverage/'
      publishTestResults: true
      projects: '**/*.Tests.csproj'

  #Create HTML report
  - script: |
      reportgenerator -reports:$(Build.SourcesDirectory)/**/coverage.cobertura.xml -targetdir:$(Build.SourcesDirectory)/CodeCoverage -reporttypes:HtmlInline_AzurePipelines
    displayName: 'Create code coverage report'

  #NEW 2: SonarCloud run analysis
  - task: SonarCloudAnalyze@1
    displayName: 'Run SonarCloud code analysis'

  #NEW 3: SonarCloud publish analysis results to cloud
  - task: SonarCloudPublish@1
    displayName: 'Publish SonarCloud code analysis results'
  
  #Publish code coverage results
  - task: PublishCodeCoverageResults@1
    displayName: 'Publish code coverage report'
    inputs:
      codeCoverageTool: 'cobertura'
      summaryFileLocation: '$(Build.SourcesDirectory)/**/coverage.cobertura.xml'

  #publish
  - task: DotNetCoreCLI@2
    displayName: 'Publish the project - $(buildConfiguration)'
    inputs:
      command: 'publish'
      projects: '**/*.csproj'
      publishWebProjects: false
      arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/$(buildConfiguration)'
      zipAfterPublish: true
  
  #publish built artifact
  - task: PublishBuildArtifacts@1